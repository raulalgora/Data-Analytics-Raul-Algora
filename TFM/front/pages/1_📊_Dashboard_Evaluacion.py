import streamlit as st
import pandas as pd

# --- Configuraci칩n de la P치gina ---
st.set_page_config(
    page_title="Dashboard de Evaluaci칩n",
    page_icon="游늳",
    layout="wide"
)

st.title("游늳 Dashboard de Evaluaci칩n de Modelos de Recomendaci칩n")
st.markdown("An치lisis comparativo de las m칠tricas de calidad para los diferentes sistemas de recomendaci칩n desarrollados.")
st.info("Resultados pre-calculados offline sobre un conjunto de prueba de **100 empleados**, recomendando **10 cursos** para cada uno.")

# ===================================================================
# DATOS PRE-CALCULADOS
# Aqu칤 pegamos los resultados que obtuviste.
# ===================================================================

evaluation_data = [
    {
        "model_name": "Modelo Base (Similitud de Coseno)",
        "description": "Este modelo recomienda los 10 cursos cuyos embeddings son m치s cercanos al embedding del perfil del empleado. Prioriza la relevancia sem치ntica directa, resultando en una alta personalizaci칩n pero con menor diversidad y cobertura.",
        "metrics": {
            "coverage": 0.03707,
            "diversity": 0.2015,
            "personalization": 0.9924,
            "avg_intra_list_similarity": 0.7984
        },
        "sample_recommendations": {
            "Ejemplo Empleado A": ["ID_Curso_1", "ID_Curso_2", "..."],
            "Ejemplo Empleado B": ["ID_Curso_3", "ID_Curso_4", "..."]
        }
    },
    {
        "model_name": "Modelo 2 (Futuro: con Mejora de Diversidad)",
        "description": "Un futuro modelo podr칤a implementar t칠cnicas como el re-ranking con penalizaci칩n por similitud (Maximal Marginal Relevance) para aumentar la diversidad y la cobertura, manteniendo una alta personalizaci칩n.",
        "metrics": {
            # Valores hipot칠ticos de un modelo mejorado
            "coverage": 0.12, # <-- Esperar칤amos que suba
            "diversity": 0.65, # <-- Esperar칤amos que suba significativamente
            "personalization": 0.98, # <-- Podr칤a bajar un poco, pero seguir칤a siendo alta
            "avg_intra_list_similarity": 0.35
        },
        "sample_recommendations": {
            "Ejemplo Empleado A": ["ID_Curso_1", "ID_Curso_X", "..."],
            "Ejemplo Empleado B": ["ID_Curso_3", "ID_Curso_Y", "..."]
        }
    }
]


# --- FUNCI칍N PARA MOSTRAR LOS RESULTADOS DE UN MODELO ---
def display_model_results(model_data):
    st.header(model_data["model_name"])
    st.markdown(f"*{model_data['description']}*")

    metrics = model_data["metrics"]
    coverage = metrics.get("coverage", 0)
    diversity = metrics.get("diversity", 0)
    personalization = metrics.get("personalization", 0)
    avg_ils = metrics.get("avg_intra_list_similarity", 0)

    # Mostrar m칠tricas en columnas
    col1, col2, col3 = st.columns(3)
    col1.metric("游늵 Cobertura", f"{coverage:.2%}", help="Porcentaje del cat치logo total de cursos que se recomienda al menos una vez. M치s alto es mejor.")
    col2.metric("游꿛 Diversidad", f"{diversity:.4f}", help=f"1 - Similitud Intra-Lista (M치s alto es mejor). La similitud promedio fue {avg_ils:.4f}.")
    col3.metric("游녻 Personalizaci칩n", f"{personalization:.4f}", help="Disimilitud promedio entre las listas de los usuarios (M치s alto es mejor).")

    # Mostrar ejemplos de recomendaciones (puedes llenar esto m치s tarde)
    with st.expander("Ver ejemplos de recomendaciones (placeholder)"):
        st.table(pd.DataFrame(model_data["sample_recommendations"]))
    
    st.markdown("---")


# --- Bucle para mostrar todos los modelos evaluados ---
for model in evaluation_data:
    display_model_results(model)